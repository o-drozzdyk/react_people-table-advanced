{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","components/PersonLink/PersonLink.tsx","utils/searchHelper.ts","components/PeopleTable/PeopleTable.tsx","components/Loader/Loader.tsx","components/SearchLink.tsx","components/PeopleFilters.tsx","api.ts","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","index.tsx"],"names":["Navbar","getLinkClass","isActive","cn","className","role","to","App","HomePage","PersonLink","person","people","name","sex","born","died","fatherName","motherName","slug","selectedSlug","useParams","mother","father","motherSlug","find","human","fatherSlug","pathname","getSearchWith","paramsToUpdate","currentParams","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","Columns","PeopleTable","useSearchParams","searchParams","sort","get","order","map","column","search","Loader","SearchLink","children","params","props","SexFilter","PeopleFilters","setSearchParams","query","centuries","getAll","toggleCentury","century","includes","filter","item","type","placeholder","onChange","event","setSearchWith","target","length","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","visiblePeople","setVisiblePeople","isError","setIsError","isLoading","setIsLoading","useEffect","getPeople","receivedPeople","catch","finally","preparedPeopleList","normalizedQuery","trim","toLowerCase","Math","ceil","a","b","localeCompare","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.266cfc15.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => {\n    return cn('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    });\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage:React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Link, useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n  people: Person[];\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, people }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n  } = person;\n\n  const { selectedSlug } = useParams();\n\n  const mother = motherName || '-';\n  const father = fatherName || '-';\n\n  const motherSlug = people.find(human => human.name === motherName)?.slug;\n  const fatherSlug = people.find(human => human.name === fatherName)?.slug;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': selectedSlug === slug,\n      })}\n    >\n      <td>\n        <Link\n          to={{\n            pathname: `/people/${slug}`,\n          }}\n          className={cn({\n            'has-text-danger': sex === 'f',\n          })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {motherSlug\n          ? (\n            <Link\n              to={`/people/${motherSlug}`}\n              className=\"has-text-danger\"\n            >\n              {mother}\n            </Link>\n          )\n          : mother}\n      </td>\n      <td>\n        {fatherSlug\n          ? (\n            <Link to={`/people/${fatherSlug}`}>\n              {father}\n            </Link>\n          )\n          : father}\n      </td>\n    </tr>\n  );\n};\n","export function fetchPeople(url: string) {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('People can not be loaded');\n      }\n\n      return response.json();\n    });\n}\n\nexport type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  paramsToUpdate: SearchParams,\n  currentParams: URLSearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { getSearchWith } from '../../utils/searchHelper';\n\ntype Props = {\n  people: Person[];\n};\n\nenum Columns {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  function handleArrowClick(column: string) {\n    if (sort !== column) {\n      return getSearchWith({ sort: column }, searchParams);\n    }\n\n    if (sort === column && !order) {\n      return getSearchWith({ sort: column, order: 'desc' }, searchParams);\n    }\n\n    return getSearchWith({ sort: null, order: null }, searchParams);\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(Columns)\n            .map(([key, value]: [key: string, value: Columns]) => (\n              <th key={key}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {key}\n                  <Link to={{ search: handleArrowClick(value) }}>\n                    <span className=\"icon\">\n                      <i className={cn('fas', {\n                        'fa-sort': sort !== value,\n                        'fa-sort-up': sort === value && !order,\n                        'fa-sort-down': sort === value && order,\n                      })}\n                      />\n                    </span>\n                  </Link>\n                </span>\n              </th>\n            ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          return (\n            <PersonLink\n              person={person}\n              people={people}\n              key={person.slug}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(params, searchParams),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { Link, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nenum SexFilter {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const centuriesList = [16, 17, 18, 19, 20];\n\n  function setSearchWith(params: any) {\n    const search = getSearchWith(params, searchParams);\n\n    setSearchParams(search);\n  }\n\n  function toggleCentury(century: number) {\n    return getSearchWith({\n      centuries: centuries.includes(century.toString())\n        ? centuries.filter(item => item !== century.toString())\n        : [...centuries, century.toString()],\n    }, searchParams);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(SexFilter)\n          .map(([key, value]: [key: string, value: string]) => (\n            <SearchLink\n              key={key}\n              className={cn({\n                'is-active': sex === value,\n              })}\n              params={{ sex: value || null }}\n            >\n              {key}\n            </SearchLink>\n          ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={(event) => {\n              setSearchWith({ query: event.target.value || null });\n            }}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesList.map(century => (\n              <Link\n                data-cy=\"century\"\n                key={century}\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century.toString()),\n                })}\n                to={{\n                  search: toggleCentury(century),\n                }}\n              >\n                {century}\n              </Link>\n            ))}\n\n            <div className=\"level-right ml-4\">\n              <SearchLink\n                data-cy=\"centuryALL\"\n                className={cn('button is-success', {\n                  'is-outlined': centuries.length,\n                })}\n                params={{ centuries: null }}\n              >\n                All\n              </SearchLink>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ query: null, sex: null, centuries: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { getPeople } from '../api';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [visiblePeople, setVisiblePeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    getPeople()\n      .then((receivedPeople) => {\n        setPeople(receivedPeople);\n        setVisiblePeople(receivedPeople);\n        setIsError(false);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    let preparedPeopleList = [...people];\n\n    if (sex) {\n      preparedPeopleList = preparedPeopleList\n        .filter(person => person.sex === sex);\n    }\n\n    if (query) {\n      const normalizedQuery = query.trim().toLowerCase();\n\n      preparedPeopleList = preparedPeopleList.filter(person => {\n        return person.name.toLowerCase().includes(normalizedQuery)\n          || person.motherName?.toLowerCase().includes(normalizedQuery)\n          || person.fatherName?.toLowerCase().includes(normalizedQuery);\n      });\n    }\n\n    if (centuries.length) {\n      preparedPeopleList = preparedPeopleList.filter(person => {\n        return centuries.includes(Math.ceil(person.born / 100).toString());\n      });\n    }\n\n    if (sort) {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          preparedPeopleList = order\n            ? preparedPeopleList\n              .sort((a, b) => b[sort].localeCompare(a[sort]))\n            : preparedPeopleList\n              .sort((a, b) => a[sort].localeCompare(b[sort]));\n          break;\n\n        case 'born':\n        case 'died':\n          preparedPeopleList = order\n            ? preparedPeopleList\n              .sort((a, b) => b[sort] - a[sort])\n            : preparedPeopleList\n              .sort((a, b) => a[sort] - b[sort]);\n          break;\n\n        default:\n          return;\n      }\n    }\n\n    setVisiblePeople(preparedPeopleList);\n  }, [sex, query, centuries, sort, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"block\">\n            <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n              {people.length !== 0 && (\n                <div className=\"column is-7-tablet is-narrow-desktop\">\n                  <PeopleFilters />\n                </div>\n              )}\n\n              <div className=\"column\">\n                <div className=\"box table-container\">\n\n                  {isError && (\n                    <p\n                      data-cy=\"peopleLoadingError\"\n                      className=\"has-text-danger\"\n                    >\n                      Something went wrong\n                    </p>\n                  )}\n\n                  {(!people.length && !isError) && (\n                    <p data-cy=\"noPeopleMessage\">\n                      There are no people on the server\n                    </p>\n                  )}\n\n                  {visiblePeople.length\n                    ? <PeopleTable people={visiblePeople} />\n                    : !isError && (\n                      <p data-cy=\"noPeopleMessage\">\n                        There are no people matching the current search criteria\n                      </p>\n                    )}\n\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n    </>\n  );\n};\n","export const NotFoundPage:React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people/:selectedSlug?\" element={<PeoplePage />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}